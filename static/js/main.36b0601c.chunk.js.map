{"version":3,"sources":["weatherApp/components/weatherTile.js","weatherApp/components/weatherTileList.js","weatherApp/components/hourlyWeatherList.js","weatherApp/components/App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","height","width","margin","media","paddingTop","WeatherTile","temperature","date","weatherType","weatherTypeImage","showTile","setTruthValue","id","time","alwaysDisplay","classes","Card","className","onClick","CardHeader","header","avatar","Typography","variant","display","disableTypography","title","noWrap","align","subheader","style","textTransform","CardMedia","image","WeatherTilesList","props","React","useState","showTiles","setShowTiles","hourlyWeatherShown","setHourlyWeatherShown","addShowTilesItem","key","getTruthValueForWeatherTile","find","x","setTruthValueCallBack","newShowTilesState","filter","setDisplayHourlyIndexCallback","indexOf","setDisplayHourly","keys","useEffect","IconButton","setTruthValueToInitial","color","aria-label","size","backgroundColor","marginLeft","weatherData","map","weatherDatum","HourlyWeatherTilesList","weatherHourly","weatherTypeImages","App","displayHourly","displayHourlyIndex","setDisplayHourlyIndex","setData","weatherDataKeys","setWeatherDataKeys","fetch","then","resp","json","data","fiveDayweatherData","index","i","console","log","list","Date","dt","toString","slice","weatherImage","weather","description","Math","round","main","temp","push","dataPair","catch","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","padding","textDecoration","Tooltip","placement","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36b0601c.chunk.js","sourcesContent":["import { Typography } from '@material-ui/core';\nimport { Card } from '@material-ui/core';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: '15%',\n        width: '20%',\n        margin: '1% 2.5%',\n    },\n    media: {\n        height: 0,\n        paddingTop: '100%',\n    },\n}));\n\nexport const WeatherTile = ({ temperature, date, weatherType, weatherTypeImage, showTile, setTruthValue, id, time, alwaysDisplay }) => {\n    const classes = useStyles();\n\n    let weatherTile;\n    (showTile || alwaysDisplay) ? weatherTile =\n        <Card className={classes.root} onClick={() => setTruthValue(id)}>\n            <CardHeader className={classes.header}\n                avatar={\n                    <Typography variant='h3'>\n                        {temperature}<sup><Typography variant='h5' display='inline'>C</Typography></sup>\n                    </Typography>\n                }\n                disableTypography={true}\n                title={\n                    <>\n                        {\n                            time ?\n                                <Typography variant='body2' noWrap align='right'>\n                                    {time}\n                                </Typography> : null\n                        }\n                        <Typography variant='body2' noWrap align='right'>\n                            {date}\n                        </Typography>\n                    </>\n                }\n                subheader={\n                    <Typography variant='h6' align='right' style={{ textTransform: 'capitalize' }}>\n                        {weatherType}\n                    </Typography>}\n            />\n            <CardMedia\n                className={classes.media}\n                image={weatherTypeImage}\n                title=\"weatherImageType\"\n            />\n        </Card>\n        : weatherTile = \"\";\n\n    return (\n        weatherTile\n    );\n}","import { WeatherTile } from './weatherTile';\nimport React, { useEffect } from 'react';\nimport './weatherTileList.css';\nimport { IconButton } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nexport const WeatherTilesList = (props) => {\n\n    const [showTiles, setShowTiles] = React.useState([]);\n    const [hourlyWeatherShown, setHourlyWeatherShown] = React.useState(false);\n\n    const addShowTilesItem = (key) => {\n        setShowTiles(showTiles => [...showTiles, { id: key, showTile: true }]);\n        /* Functional version of setState which stores the values and makes last values available\n        since the new values in usual setState aren't available until later of the render cycle */\n    }\n\n    const getTruthValueForWeatherTile = (id) => {\n        return showTiles.find(x => x.id === id);\n    }\n\n    const setTruthValueCallBack = (key) => {\n        var newShowTilesState = showTiles.filter((x) => {\n            if (x.id === key) {\n                props.setDisplayHourlyIndexCallback(showTiles.indexOf(x));\n                return x;\n            }\n            else {\n                x.showTile = false;\n                return x;\n            }\n        });\n\n        props.setDisplayHourly(true);\n        setHourlyWeatherShown(true);\n        setShowTiles(newShowTilesState);\n    }\n\n    const setTruthValueToInitial = () => {\n        var newShowTilesState = showTiles.filter((x) => {\n            props.setDisplayHourlyIndexCallback(-1);\n            x.showTile = true;\n            return x;\n\n        });\n\n        props.setDisplayHourly(false);\n        setHourlyWeatherShown(false);\n        setShowTiles(newShowTilesState);\n    }\n\n    const keys = props.keys; // Grabs the keys from the weather Data coming from store \n\n    useEffect(() => {\n        for (let key of keys) {\n            addShowTilesItem(key);\n        }\n    }, [keys]);\n\n    return (\n        <>\n\n            { hourlyWeatherShown ?\n                <IconButton onClick={() => setTruthValueToInitial()} color=\"secondary\" aria-label=\"add an alarm\" size=\"medium\" style={{ backgroundColor: \"white\", marginLeft: '1%', display: \"initial\" }}>\n                    <ArrowBackIosIcon />\n                </IconButton> : null\n            }\n            <div className='weatherTilesDiv'>\n                {\n                    (props.weatherData || []).map(\n                        weatherDatum => {\n                            return (\n                                <WeatherTile\n                                    temperature={weatherDatum.temperature}\n                                    date={weatherDatum.date}\n                                    weatherType={weatherDatum.weatherType}\n                                    weatherTypeImage={weatherDatum.weatherTypeImage}\n                                    showTile={getTruthValueForWeatherTile(weatherDatum.key) ? getTruthValueForWeatherTile(weatherDatum.key).showTile : true}\n                                    key={weatherDatum.key}\n                                    id={weatherDatum.key}\n                                    setTruthValue={setTruthValueCallBack}\n                                />\n                            )\n                        }\n                    )\n                }\n            </div>\n        </>\n    )\n}","import { WeatherTile } from './weatherTile';\nimport React from 'react';\nimport './weatherTileList.css';\n\nexport const HourlyWeatherTilesList = (weatherData) => {\n    return (\n        <div className='weatherTilesDiv'>\n            {\n                (weatherData.weatherData.weatherHourly || []).map(\n                    weatherDatum => {\n                        return (\n                            <WeatherTile\n                                temperature={weatherDatum.temperature}\n                                date={weatherData.weatherData.date}\n                                weatherType={weatherDatum.weatherType}\n                                weatherTypeImage={weatherDatum.weatherTypeImage}\n                                time={weatherDatum.time}\n                                key={weatherDatum.key}\n                                id={weatherDatum.key}\n                                alwaysDisplay={true}\n                                setTruthValue={() => null}\n                            />\n                        )\n                    }\n                )\n            }\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { WeatherTilesList } from './weatherTileList';\nimport { HourlyWeatherTilesList } from \"./hourlyWeatherList\";\nimport { Tooltip, Typography, IconButton } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\n\n/* All images are subject to copyright and belong to their respective users and creators, used only for learning purposes */\nconst weatherTypeImages = {\n  partlyCloudy: 'https://mir-s3-cdn-cf.behance.net/project_modules/disp/c81fed16071075.562a501d5e911.gif',\n  sunny: 'https://mir-s3-cdn-cf.behance.net/project_modules/disp/421f0c16071075.562a500e6ddd4.gif',\n  rainy: 'https://mir-s3-cdn-cf.behance.net/project_modules/disp/a2405c16071075.562a5050beed0.gif',\n  foggy: 'https://mir-s3-cdn-cf.behance.net/project_modules/disp/4d353e16071075.562a504473c5c.gif',\n  stormy: 'https://mir-s3-cdn-cf.behance.net/project_modules/disp/58027c16071075.562a502d796a8.gif',\n  lightSnow: 'https://i.pinimg.com/originals/ea/2c/b7/ea2cb7d85f2873f3a9f0d50cacde6817.gif',\n  overcastClouds: 'https://mir-s3-cdn-cf.behance.net/project_modules/disp/f4806457493795.59d8b8ddb42d7.gif',\n  clearSky: 'https://media4.giphy.com/media/5PhRWWyHVy3goI9A0T/giphy.gif',\n  scatteredClouds: 'https://media4.giphy.com/media/26gs87YcoCMeQFMcw/giphy.gif',\n  fewClouds: 'https://media1.giphy.com/media/26uf7RM9Nb9WgpMv6/source.gif',\n}\n\nconst App = () => {\n\n  const [displayHourly, setDisplayHourly] = React.useState(false);\n  const [displayHourlyIndex, setDisplayHourlyIndex] = React.useState(-1);\n\n  const setDisplayHourlyIndexCallback = (index) => {\n    setDisplayHourlyIndex(index);\n  }\n\n  const [weatherData, setData] = React.useState([]);\n  const [weatherDataKeys, setWeatherDataKeys] = React.useState([]);\n\n  React.useEffect(() => {\n    fetch('https://api.openweathermap.org/data/2.5/forecast?id=6183235&units=metric&appid=95848a8bff0e348e948feac55a3477d1')\n      .then(resp => resp.json()) // Convert data to json\n      .then(function (data) {\n\n        let fiveDayweatherData = [];\n        let keys = [];\n        let weatherDatum;\n        let index = -1;\n\n        console.log(data);\n\n        for (let i in data.list) {\n\n          let d = new Date(data.list[i].dt * 1000);\n          let dateString = d.toString();\n          let date = dateString.slice(0, 10);\n\n          let weatherImage;\n\n          switch (data.list[i].weather[0].description) {\n            case \"partly cloudy\":\n              weatherImage = weatherTypeImages.partlyCloudy;\n              break;\n            case \"sunny\":\n              weatherImage = weatherTypeImages.sunny;\n              break;\n            case \"rainy\":\n              weatherImage = weatherTypeImages.rainy;\n              break;\n            case \"stormy\":\n              weatherImage = weatherTypeImages.stormy;\n              break;\n            case \"foggy\":\n              weatherImage = weatherTypeImages.foggy;\n              break;\n            case \"overcast clouds\":\n              weatherImage = weatherTypeImages.overcastClouds;\n              break;\n            case \"light snow\":\n              weatherImage = weatherTypeImages.lightSnow;\n              break;\n            case \"clear sky\":\n              weatherImage = weatherTypeImages.clearSky;\n              break;\n            case \"scattered clouds\":\n              weatherImage = weatherTypeImages.scatteredClouds;\n              break;\n            case \"broken clouds\":\n              weatherImage = weatherTypeImages.fewClouds;\n              break;\n            case \"snow\":\n              weatherImage = weatherTypeImages.lightSnow;\n              break;\n            case \"few clouds\":\n              weatherImage = weatherTypeImages.fewClouds;\n              break;\n            default:\n              weatherImage = \"\";\n          }\n\n          weatherDatum = {\n            key: `00${i}`,\n            temperature: Math.round(data.list[i].main.temp),\n            date: date,\n            weatherType: (data.list[i].weather[0].description),\n            weatherTypeImage: weatherImage,\n            weatherHourly: [],\n          }\n\n          if (i % 8 === 0) {\n            fiveDayweatherData.push(weatherDatum);\n            keys.push(weatherDatum.key);\n            index = index + 1;\n          }\n          else {\n            fiveDayweatherData[index].weatherHourly.push(weatherDatum);\n          }\n        }\n        const dataPair = { fiveDayweatherData, keys };\n        return dataPair;\n      })\n      .then(\n        dataPair => { setData(dataPair.fiveDayweatherData); setWeatherDataKeys(dataPair.keys); }\n      )\n      .catch(function () {\n        console.log(\"Error fetching weather data\")\n      });\n  }, []);\n\n  return (\n    <>\n      <Typography align='center' variant='h4' style={{ color: '#111', fontFamily: \"Helvetica Neue', sans-serif\", fontSize: '3rem', fontWeight: 'bold', letterSpacing: '-1px', lineHeight: '1', textAlign: 'center', padding: '20px 20px 0px 20px' }}>\n        Five Days Weather Forecast\n      </Typography>\n      <Typography align='center' variant='h6' style={{ color: '#111', fontFamily: \"Helvetica Neue', sans-serif\", fontWeight: 'bold', letterSpacing: '-1px', lineHeight: '1', padding: '20px' }}>\n        Showing Weather for :\n        <p style={{ color: 'skyblue', display: 'inline', textDecoration: 'none', lineHeight: '4', backgroundColor: 'white', padding: '3px 7px', marginLeft: \"1%\" }}>\n          Winnipeg\n        </p>\n      </Typography>\n\n      {\n        < WeatherTilesList\n          weatherData={weatherData}\n          setDisplayHourly={setDisplayHourly}\n          setDisplayHourlyIndexCallback={setDisplayHourlyIndexCallback}\n          keys={weatherDataKeys}\n        />\n      }\n      { displayHourly && displayHourlyIndex >= 0 ?\n        <>\n          <Typography align='center' variant='h4' style={{ color: '#111', fontFamily: \"Helvetica Neue', sans-serif\", fontSize: '3rem', fontWeight: 'bold', letterSpacing: '-1px', lineHeight: '1', textAlign: 'center', padding: '20px 20px 20px 20px' }}>\n            Hourly Weather Forecast\n            <Tooltip title={<p>Shows Weather data at 3 hours interval apart from current time</p>} placement=\"top\">\n              <IconButton>\n                <InfoIcon />\n              </IconButton>\n            </Tooltip>\n          </Typography>\n\n          <HourlyWeatherTilesList\n            weatherData={weatherData[displayHourlyIndex]}\n          />\n        </>\n        : null\n      }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/weatherApp/components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div className=\"weatherTilesListDiv\">\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}